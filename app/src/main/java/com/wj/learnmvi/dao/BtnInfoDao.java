package com.wj.learnmvi.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.wj.learnmvi.dao.bean.PageInfo;

import com.wj.learnmvi.dao.bean.BtnInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BTN_INFO".
*/
public class BtnInfoDao extends AbstractDao<BtnInfo, Long> {

    public static final String TABLENAME = "BTN_INFO";

    /**
     * Properties of entity BtnInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Button_name = new Property(1, String.class, "button_name", false, "BUTTON_NAME");
        public final static Property Click_num = new Property(2, int.class, "click_num", false, "CLICK_NUM");
        public final static Property PageId = new Property(3, Long.class, "PageId", false, "PAGE_ID");
        public final static Property UserId = new Property(4, Long.class, "UserId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<BtnInfo> pageInfo_BtnInfoListQuery;

    public BtnInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BtnInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BTN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BUTTON_NAME\" TEXT," + // 1: button_name
                "\"CLICK_NUM\" INTEGER NOT NULL ," + // 2: click_num
                "\"PAGE_ID\" INTEGER," + // 3: PageId
                "\"USER_ID\" INTEGER);"); // 4: UserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BTN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BtnInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String button_name = entity.getButton_name();
        if (button_name != null) {
            stmt.bindString(2, button_name);
        }
        stmt.bindLong(3, entity.getClick_num());
 
        Long PageId = entity.getPageId();
        if (PageId != null) {
            stmt.bindLong(4, PageId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(5, UserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BtnInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String button_name = entity.getButton_name();
        if (button_name != null) {
            stmt.bindString(2, button_name);
        }
        stmt.bindLong(3, entity.getClick_num());
 
        Long PageId = entity.getPageId();
        if (PageId != null) {
            stmt.bindLong(4, PageId);
        }
 
        Long UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindLong(5, UserId);
        }
    }

    @Override
    protected final void attachEntity(BtnInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BtnInfo readEntity(Cursor cursor, int offset) {
        BtnInfo entity = new BtnInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // button_name
            cursor.getInt(offset + 2), // click_num
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // PageId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // UserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BtnInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setButton_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClick_num(cursor.getInt(offset + 2));
        entity.setPageId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BtnInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BtnInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BtnInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "btnInfoList" to-many relationship of PageInfo. */
    public List<BtnInfo> _queryPageInfo_BtnInfoList(Long PageId) {
        synchronized (this) {
            if (pageInfo_BtnInfoListQuery == null) {
                QueryBuilder<BtnInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PageId.eq(null));
                pageInfo_BtnInfoListQuery = queryBuilder.build();
            }
        }
        Query<BtnInfo> query = pageInfo_BtnInfoListQuery.forCurrentThread();
        query.setParameter(0, PageId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPageInfoDao().getAllColumns());
            builder.append(" FROM BTN_INFO T");
            builder.append(" LEFT JOIN PAGE_INFO T0 ON T.\"PAGE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BtnInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        BtnInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PageInfo pageInfo = loadCurrentOther(daoSession.getPageInfoDao(), cursor, offset);
        entity.setPageInfo(pageInfo);

        return entity;    
    }

    public BtnInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BtnInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BtnInfo> list = new ArrayList<BtnInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BtnInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BtnInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
